/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */


declare global {
  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;
  }
}



import {
  GithubIntro as GithubIntro
} from './components/github-intro/github-intro';

declare global {
  interface HTMLGithubIntroElement extends GithubIntro, HTMLStencilElement {
  }
  var HTMLGithubIntroElement: {
    prototype: HTMLGithubIntroElement;
    new (): HTMLGithubIntroElement;
  };
  interface HTMLElementTagNameMap {
    "github-intro": HTMLGithubIntroElement;
  }
  interface ElementTagNameMap {
    "github-intro": HTMLGithubIntroElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "github-intro": JSXElements.GithubIntroAttributes;
    }
  }
  namespace JSXElements {
    export interface GithubIntroAttributes extends HTMLAttributes {
      userid?: string;
    }
  }
}


import {
  ImgMask as ImgMask
} from './components/img-mask/img-mask';

declare global {
  interface HTMLImgMaskElement extends ImgMask, HTMLStencilElement {
  }
  var HTMLImgMaskElement: {
    prototype: HTMLImgMaskElement;
    new (): HTMLImgMaskElement;
  };
  interface HTMLElementTagNameMap {
    "img-mask": HTMLImgMaskElement;
  }
  interface ElementTagNameMap {
    "img-mask": HTMLImgMaskElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "img-mask": JSXElements.ImgMaskAttributes;
    }
  }
  namespace JSXElements {
    export interface ImgMaskAttributes extends HTMLAttributes {
      maskHeight?: number;
      maskTop?: number;
      src?: string;
      width?: number;
    }
  }
}


import {
  QueueDot as QueueDot
} from './components/queue-demo/dot';

declare global {
  interface HTMLQueueDotElement extends QueueDot, HTMLStencilElement {
  }
  var HTMLQueueDotElement: {
    prototype: HTMLQueueDotElement;
    new (): HTMLQueueDotElement;
  };
  interface HTMLElementTagNameMap {
    "queue-dot": HTMLQueueDotElement;
  }
  interface ElementTagNameMap {
    "queue-dot": HTMLQueueDotElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "queue-dot": JSXElements.QueueDotAttributes;
    }
  }
  namespace JSXElements {
    export interface QueueDotAttributes extends HTMLAttributes {
      size?: number;
      text?: string;
      x?: number;
      y?: number;
    }
  }
}


import {
  QueueDemo as QueueDemo
} from './components/queue-demo/index';

declare global {
  interface HTMLQueueDemoElement extends QueueDemo, HTMLStencilElement {
  }
  var HTMLQueueDemoElement: {
    prototype: HTMLQueueDemoElement;
    new (): HTMLQueueDemoElement;
  };
  interface HTMLElementTagNameMap {
    "queue-demo": HTMLQueueDemoElement;
  }
  interface ElementTagNameMap {
    "queue-demo": HTMLQueueDemoElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "queue-demo": JSXElements.QueueDemoAttributes;
    }
  }
  namespace JSXElements {
    export interface QueueDemoAttributes extends HTMLAttributes {
      elapsed?: number;
    }
  }
}


import {
  QueueTriangle as QueueTriangle
} from './components/queue-demo/triangle';

declare global {
  interface HTMLQueueTriangleElement extends QueueTriangle, HTMLStencilElement {
  }
  var HTMLQueueTriangleElement: {
    prototype: HTMLQueueTriangleElement;
    new (): HTMLQueueTriangleElement;
  };
  interface HTMLElementTagNameMap {
    "queue-triangle": HTMLQueueTriangleElement;
  }
  interface ElementTagNameMap {
    "queue-triangle": HTMLQueueTriangleElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "queue-triangle": JSXElements.QueueTriangleAttributes;
    }
  }
  namespace JSXElements {
    export interface QueueTriangleAttributes extends HTMLAttributes {
      s?: number;
      seconds?: number;
      x?: number;
      y?: number;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
